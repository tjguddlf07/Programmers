class Solution {
  public String solution(int a, int b) {
      String answer = "";                                         //answer(문자열) 변수 초기화
      String weeks[]={"SUN","MON","TUE","WED","THU","FRI","SAT"}; //weeks(문자열) 초기화
      int months[]={31,29,31,30,31,30,31,31,30,31,30,31};         //월(month) 초기화
      int sum=0;                                                  //합 초기화
      
      for(int i=0;i<a;i++){
          sum+=months[i];
      }
      
      int date= sum + b;        
      
      switch(date%7){
              case(0):answer=weeks[4];break;
              case(1):answer=weeks[5];break;
              case(2):answer=weeks[6];break;
              case(3):answer=weeks[0];break;
              case(4):answer=weeks[1];break;
              case(5):answer=weeks[2];break;
              case(6):answer=weeks[3];break;       
      }
      return answer;
  }
}



/*0 -> 목, 1 -> 금, 2 -> 토, 3 -> 일, 4 -> 월, 5 - > 화, 6 -> 수

다음과 같은 index와 값을 가지는 weeks[7]배열을 가진다. 나중에 몇일에 해당하는 요일을 구하기위해 사용

예를 들어, weeks[5], 1월 5일은 화요일입니다. 그러면 25일의 경우 배열의 크기에서 벗어남. 그렇기 때문에 weeks[일 % 7]을 해줍니다.

그리고 각각의 달이 몇일까지 존재하는지를 저장하는 배열을 만들어 줍니다(1월은 제외)

왜냐하면 2월 17일의 경우, 1월 1일부터 몇일이나 지났는지 검사하기 위함입니다.

 int months[12] = {0,31,29,31,30,31,30,31,31,30,31,30}; 

0월은 없기 때문에 month[0]=0이고 , month[1]은 1월이 31까지 있다는 의미 입니다.

13월은 존재하지 않기 때문에 month[12]는 없습니다.

index와 월을 맞추기 위해 이런 식으로 하였습니다.

그럼 다음, 현재 달-1까지 반복하면서 지나온 일을 계산합니다.

그렇게 되면 위의 달력에서 2,3,4,5...달력을 계속 아래로 추가한 그림을 그릴 수 있고,

각각의 일은 달을 지날 때 마다 다시 1로 초기화 되는게 아니라 계속 1씩 더해지는 모양이 되겠죠.

1월 31일 -> 32,33,34,35,36...

그런 다음 현재 일수가 구해지면, weeks[ 일수 % 7 ]으로 값을 구할 수 있습니다*/
